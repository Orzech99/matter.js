{
  "version": 3,
  "sources": ["../../../src/ble/ReactNativeBleClient.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { BLE_MATTER_SERVICE_UUID } from \"@project-chip/matter.js/ble\";\nimport { MatterError } from \"@project-chip/matter.js/common\";\nimport { Logger } from \"@project-chip/matter.js/log\";\nimport { ByteArray } from \"@project-chip/matter.js/util\";\nimport { BleError, BleErrorCode, BleManager, State as BluetoothState, Device } from \"react-native-ble-plx\";\n\nconst logger = Logger.get(\"ReactNativeBleClient\");\n\nexport class BluetoothUnauthorizedError extends MatterError {}\nexport class BluetoothUnsupportedError extends MatterError {}\n\nexport class ReactNativeBleClient {\n    private readonly bleManager = new BleManager();\n    private readonly discoveredPeripherals = new Map<string, { peripheral: Device; matterServiceData: ByteArray }>();\n    private shouldScan = false;\n    private isScanning = false;\n    private bleState = BluetoothState.Unknown;\n    private deviceDiscoveredCallback: ((peripheral: Device, manufacturerData: ByteArray) => void) | undefined;\n\n    constructor() {\n        // this.bleMnager.setLogLevel(LogLevel.Verbose)\n        const subscription = this.bleManager.onStateChange(state => {\n            this.bleState = state;\n            logger.debug(`BLE state changed to ${state}`);\n            switch (state) {\n                case BluetoothState.PoweredOff:\n                    this.bleManager.enable().catch(error => {\n                        subscription.remove();\n                        if (error instanceof BleError && error.errorCode === BleErrorCode.BluetoothUnauthorized) {\n                            throw new BluetoothUnauthorizedError(\"Bluetooth is unauthorized\");\n                        }\n                        throw error;\n                    });\n                    break;\n                case BluetoothState.PoweredOn:\n                    subscription.remove();\n                    if (this.shouldScan) {\n                        void this.startScanning();\n                    }\n                    break;\n                case BluetoothState.Unauthorized:\n                    subscription.remove();\n                    throw new BluetoothUnauthorizedError(\"Bluetooth is unauthorized\");\n                case BluetoothState.Unsupported:\n                    subscription.remove();\n                    throw new BluetoothUnsupportedError(\"Bluetooth is unsupported\");\n                default:\n                    logger.error(\"Unexpected BLE state\", state);\n                    subscription.remove();\n                    void this.stopScanning();\n            }\n        });\n    }\n\n    public setDiscoveryCallback(callback: (peripheral: Device, manufacturerData: ByteArray) => void) {\n        this.deviceDiscoveredCallback = callback;\n        for (const { peripheral, matterServiceData } of this.discoveredPeripherals.values()) {\n            this.deviceDiscoveredCallback(peripheral, matterServiceData);\n        }\n    }\n\n    public async startScanning() {\n        if (this.isScanning) return;\n\n        this.shouldScan = true;\n        if (this.bleState === BluetoothState.PoweredOn) {\n            logger.debug(\"Start BLE scanning for Matter Services ...\");\n            this.isScanning = true;\n            this.bleManager.startDeviceScan([BLE_MATTER_SERVICE_UUID], {}, (error, peripheral) => {\n                if (error !== null || peripheral === null) {\n                    this.isScanning = false;\n                    logger.error(\"Error while scanning for BLE devices\", error);\n                    if (this.shouldScan) {\n                        this.startScanning().catch(error =>\n                            logger.error(\"Error while restarting scanning after error\", error),\n                        );\n                    } else {\n                        this.stopScanning();\n                    }\n                    return;\n                }\n                this.handleDiscoveredDevice(peripheral);\n            });\n        } else {\n            logger.debug(\"ble state is not poweredOn ... delay scanning till poweredOn\");\n        }\n    }\n\n    public async stopScanning() {\n        this.shouldScan = false;\n        logger.debug(\"Stop BLE scanning for Matter Services ...\");\n        this.bleManager.stopDeviceScan();\n        this.isScanning = false;\n    }\n\n    private handleDiscoveredDevice(peripheral: Device) {\n        // The advertisement data contains a name, power level (if available), certain advertised service uuids,\n        // as well as manufacturer data.\n        // {\"localName\":\"MATTER-3840\",\"serviceData\":[{\"uuid\":\"fff6\",\"data\":{\"type\":\"Buffer\",\"data\":[0,0,15,241,255,1,128,0]}}],\"serviceUuids\":[\"fff6\"],\"solicitationServiceUuids\":[],\"serviceSolicitationUuids\":[]}\n        logger.debug(\n            `Found peripheral ${peripheral.id} (${peripheral.localName}) with serviceData ${Logger.toJSON(peripheral.serviceData)}`,\n        );\n\n        if (!peripheral.isConnectable) {\n            logger.info(`Peripheral ${peripheral.id} is not connectable ... ignoring`);\n            return;\n        }\n        const matterServiceDataBase64 = peripheral.serviceData?.[BLE_MATTER_SERVICE_UUID];\n        if (matterServiceDataBase64 === undefined) {\n            logger.info(`Peripheral ${peripheral.id} does not advertise Matter Service ... ignoring`);\n            return;\n        }\n        const matterServiceData = ByteArray.fromBase64(matterServiceDataBase64);\n        if (matterServiceData.length !== 8) {\n            logger.info(`Peripheral ${peripheral.id} does not advertise Matter Service ... ignoring`);\n            return;\n        }\n\n        this.discoveredPeripherals.set(peripheral.id, {\n            peripheral,\n            matterServiceData: matterServiceData,\n        });\n\n        this.deviceDiscoveredCallback?.(peripheral, matterServiceData);\n    }\n}\n"],
  "mappings": "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",
  "names": ["error"]
}
