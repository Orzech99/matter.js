{
  "version": 3,
  "sources": ["../../../src/ble/BleScanner.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { BleError } from \"@project-chip/matter.js/ble\";\nimport { BtpCodec } from \"@project-chip/matter.js/codec\";\nimport { CommissionableDevice, CommissionableDeviceIdentifiers, Scanner } from \"@project-chip/matter.js/common\";\nimport { VendorId } from \"@project-chip/matter.js/datatype\";\nimport { Logger } from \"@project-chip/matter.js/log\";\nimport { Time, Timer } from \"@project-chip/matter.js/time\";\nimport { ByteArray, createPromise } from \"@project-chip/matter.js/util\";\nimport { Device } from \"react-native-ble-plx\";\nimport { ReactNativeBleClient } from \"./ReactNativeBleClient.js\";\n\nconst logger = Logger.get(\"BleScanner\");\n\nexport type DiscoveredBleDevice = {\n    deviceData: CommissionableDeviceData;\n    peripheral: Device;\n    hasAdditionalAdvertisementData: boolean;\n};\n\ntype CommissionableDeviceData = CommissionableDevice & {\n    SD: number; // Additional Field for Short discriminator\n};\n\nexport class BleScanner implements Scanner {\n    private readonly recordWaiters = new Map<\n        string,\n        {\n            resolver: () => void;\n            timer: Timer;\n            resolveOnUpdatedRecords: boolean;\n        }\n    >();\n    private readonly discoveredMatterDevices = new Map<string, DiscoveredBleDevice>();\n\n    constructor(private readonly bleClient: ReactNativeBleClient) {\n        this.bleClient.setDiscoveryCallback((address, manufacturerData) =>\n            this.handleDiscoveredDevice(address, manufacturerData),\n        );\n    }\n\n    public getDiscoveredDevice(address: string): DiscoveredBleDevice {\n        const device = this.discoveredMatterDevices.get(address);\n        if (device === undefined) {\n            throw new BleError(`No device found for address ${address}`);\n        }\n        return device;\n    }\n\n    /**\n     * Registers a deferred promise for a specific queryId together with a timeout and return the promise.\n     * The promise will be resolved when the timer runs out latest.\n     */\n    private async registerWaiterPromise(queryId: string, timeoutSeconds: number, resolveOnUpdatedRecords = true) {\n        const { promise, resolver } = createPromise<void>();\n        const timer = Time.getTimer(\"BLE query timeout\", timeoutSeconds * 1000, () =>\n            this.finishWaiter(queryId, true),\n        ).start();\n        this.recordWaiters.set(queryId, { resolver, timer, resolveOnUpdatedRecords });\n        logger.debug(\n            `Registered waiter for query ${queryId} with timeout ${timeoutSeconds} seconds${\n                resolveOnUpdatedRecords ? \"\" : \" (not resolving on updated records)\"\n            }`,\n        );\n        await promise;\n    }\n\n    /**\n     * Remove a waiter promise for a specific queryId and stop the connected timer. If required also resolve the\n     * promise.\n     */\n    private finishWaiter(queryId: string, resolvePromise: boolean, isUpdatedRecord = false) {\n        const waiter = this.recordWaiters.get(queryId);\n        if (waiter === undefined) return;\n        const { timer, resolver, resolveOnUpdatedRecords } = waiter;\n        if (isUpdatedRecord && !resolveOnUpdatedRecords) return;\n        logger.debug(`Finishing waiter for query ${queryId}, resolving: ${resolvePromise}`);\n        timer.stop();\n        if (resolvePromise) {\n            resolver();\n        }\n        this.recordWaiters.delete(queryId);\n    }\n\n    cancelCommissionableDeviceDiscovery(identifier: CommissionableDeviceIdentifiers) {\n        const queryKey = this.buildCommissionableQueryIdentifier(identifier);\n        this.finishWaiter(queryKey, true);\n    }\n\n    private handleDiscoveredDevice(peripheral: Device, manufacturerServiceData: ByteArray) {\n        logger.debug(\n            `Discovered device ${peripheral.id} \"${peripheral.localName}\" ${manufacturerServiceData?.toHex()}`,\n        );\n\n        try {\n            const { discriminator, vendorId, productId, hasAdditionalAdvertisementData } =\n                BtpCodec.decodeBleAdvertisementServiceData(manufacturerServiceData);\n\n            const commissionableDevice: CommissionableDeviceData = {\n                deviceIdentifier: peripheral.id,\n                D: discriminator,\n                SD: (discriminator >> 8) & 0x0f,\n                VP: `${vendorId}+${productId}`,\n                CM: 1, // Can be no other mode,\n                addresses: [{ type: \"ble\", peripheralAddress: peripheral.id }],\n            };\n            logger.debug(`Discovered device ${peripheral.id} data: ${JSON.stringify(commissionableDevice)}`);\n\n            const deviceExisting = this.discoveredMatterDevices.has(peripheral.id);\n\n            this.discoveredMatterDevices.set(peripheral.id, {\n                deviceData: commissionableDevice,\n                peripheral: peripheral,\n                hasAdditionalAdvertisementData,\n            });\n\n            const queryKey = this.findCommissionableQueryIdentifier(commissionableDevice);\n            if (queryKey !== undefined) {\n                this.finishWaiter(queryKey, true, deviceExisting);\n            }\n        } catch (error) {\n            logger.debug(`Seems not to be a valid Matter device: Failed to decode device data: ${error}`);\n        }\n    }\n\n    private findCommissionableQueryIdentifier(record: CommissionableDeviceData) {\n        const longDiscriminatorQueryId = this.buildCommissionableQueryIdentifier({ longDiscriminator: record.D });\n        if (this.recordWaiters.has(longDiscriminatorQueryId)) {\n            return longDiscriminatorQueryId;\n        }\n\n        const shortDiscriminatorQueryId = this.buildCommissionableQueryIdentifier({ shortDiscriminator: record.SD });\n        if (this.recordWaiters.has(shortDiscriminatorQueryId)) {\n            return shortDiscriminatorQueryId;\n        }\n\n        if (record.VP !== undefined) {\n            const vendorIdQueryId = this.buildCommissionableQueryIdentifier({\n                vendorId: VendorId(parseInt(record.VP.split(\"+\")[0])),\n            });\n            if (this.recordWaiters.has(vendorIdQueryId)) {\n                return vendorIdQueryId;\n            }\n            if (record.VP.includes(\"+\")) {\n                const productIdQueryId = this.buildCommissionableQueryIdentifier({\n                    vendorId: VendorId(parseInt(record.VP.split(\"+\")[1])),\n                });\n                if (this.recordWaiters.has(productIdQueryId)) {\n                    return productIdQueryId;\n                }\n            }\n        }\n\n        if (this.recordWaiters.has(\"*\")) {\n            return \"*\";\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Builds an identifier string for commissionable queries based on the given identifier object.\n     * Some identifiers are identical to the official DNS-SD identifiers, others are custom.\n     */\n    private buildCommissionableQueryIdentifier(identifier: CommissionableDeviceIdentifiers) {\n        if (\"longDiscriminator\" in identifier) {\n            return `D:${identifier.longDiscriminator}`;\n        } else if (\"shortDiscriminator\" in identifier) {\n            return `SD:${identifier.shortDiscriminator}`;\n        } else if (\"vendorId\" in identifier) {\n            return `V:${identifier.vendorId}`;\n        } else if (\"productId\" in identifier) {\n            // Custom identifier because normally productId is only included in TXT record\n            return `P:${identifier.productId}`;\n        } else return \"*\";\n    }\n\n    private getCommissionableDevices(identifier: CommissionableDeviceIdentifiers) {\n        const storedRecords = Array.from(this.discoveredMatterDevices.values());\n\n        const foundRecords = new Array<DiscoveredBleDevice>();\n        if (\"longDiscriminator\" in identifier) {\n            foundRecords.push(...storedRecords.filter(({ deviceData: { D } }) => D === identifier.longDiscriminator));\n        } else if (\"shortDiscriminator\" in identifier) {\n            foundRecords.push(\n                ...storedRecords.filter(({ deviceData: { SD } }) => SD === identifier.shortDiscriminator),\n            );\n        } else if (\"vendorId\" in identifier) {\n            foundRecords.push(\n                ...storedRecords.filter(\n                    ({ deviceData: { VP } }) =>\n                        VP === `${identifier.vendorId}` || VP?.startsWith(`${identifier.vendorId}+`),\n                ),\n            );\n        } else if (\"productId\" in identifier) {\n            foundRecords.push(\n                ...storedRecords.filter(({ deviceData: { VP } }) => VP?.endsWith(`+${identifier.productId}`)),\n            );\n        } else {\n            foundRecords.push(...storedRecords.filter(({ deviceData: { CM } }) => CM === 1 || CM === 2));\n        }\n\n        return foundRecords;\n    }\n\n    async findOperationalDevice(): Promise<undefined> {\n        logger.info(`skip BLE scan because scanning for operational devices is not supported`);\n        return undefined;\n    }\n\n    getDiscoveredOperationalDevice(): undefined {\n        logger.info(`skip BLE scan because scanning for operational devices is not supported`);\n        return undefined;\n    }\n\n    async findCommissionableDevices(\n        identifier: CommissionableDeviceIdentifiers,\n        timeoutSeconds = 10,\n    ): Promise<CommissionableDevice[]> {\n        let storedRecords = this.getCommissionableDevices(identifier);\n        if (storedRecords.length === 0) {\n            const queryKey = this.buildCommissionableQueryIdentifier(identifier);\n\n            await this.bleClient.startScanning();\n            await this.registerWaiterPromise(queryKey, timeoutSeconds);\n\n            storedRecords = this.getCommissionableDevices(identifier);\n            await this.bleClient.stopScanning();\n        }\n        return storedRecords.map(({ deviceData }) => deviceData);\n    }\n\n    async findCommissionableDevicesContinuously(\n        identifier: CommissionableDeviceIdentifiers,\n        callback: (device: CommissionableDevice) => void,\n        timeoutSeconds = 60,\n    ): Promise<CommissionableDevice[]> {\n        const discoveredDevices = new Set<string>();\n\n        const discoveryEndTime = Time.nowMs() + timeoutSeconds * 1000;\n        const queryKey = this.buildCommissionableQueryIdentifier(identifier);\n        await this.bleClient.startScanning();\n\n        while (true) {\n            this.getCommissionableDevices(identifier).forEach(({ deviceData }) => {\n                const { deviceIdentifier } = deviceData;\n                if (!discoveredDevices.has(deviceIdentifier)) {\n                    discoveredDevices.add(deviceIdentifier);\n                    callback(deviceData);\n                }\n            });\n\n            const remainingTime = Math.ceil((discoveryEndTime - Time.nowMs()) / 1000);\n            if (remainingTime <= 0) {\n                break;\n            }\n            await this.registerWaiterPromise(queryKey, remainingTime, false);\n        }\n        await this.bleClient.stopScanning();\n        return this.getCommissionableDevices(identifier).map(({ deviceData }) => deviceData);\n    }\n\n    getDiscoveredCommissionableDevices(identifier: CommissionableDeviceIdentifiers): CommissionableDevice[] {\n        return this.getCommissionableDevices(identifier).map(({ deviceData }) => deviceData);\n    }\n\n    close(): void {\n        void this.bleClient.stopScanning();\n        [...this.recordWaiters.keys()].forEach(queryId =>\n            this.finishWaiter(queryId, !!this.recordWaiters.get(queryId)?.timer),\n        );\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
