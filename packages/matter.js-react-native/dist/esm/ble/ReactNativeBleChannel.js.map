{
  "version": 3,
  "sources": ["../../../src/ble/ReactNativeBleChannel.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BLE_MATTER_C1_CHARACTERISTIC_UUID,\n    BLE_MATTER_C2_CHARACTERISTIC_UUID,\n    BLE_MATTER_C3_CHARACTERISTIC_UUID,\n    BLE_MATTER_SERVICE_UUID,\n    BLE_MAXIMUM_BTP_MTU,\n    BTP_CONN_RSP_TIMEOUT_MS,\n    BTP_MAXIMUM_WINDOW_SIZE,\n    BTP_SUPPORTED_VERSIONS,\n    Ble,\n    BleError,\n    BtpFlowError,\n    BtpSessionHandler,\n} from \"@project-chip/matter.js/ble\";\nimport { BtpCodec } from \"@project-chip/matter.js/codec\";\nimport { Channel, InternalError, Listener, ServerAddress } from \"@project-chip/matter.js/common\";\nimport { Logger } from \"@project-chip/matter.js/log\";\nimport { NetInterface } from \"@project-chip/matter.js/net\";\nimport { Time } from \"@project-chip/matter.js/time\";\nimport { ByteArray, createPromise } from \"@project-chip/matter.js/util\";\nimport {\n    BleErrorCode,\n    Characteristic,\n    Device,\n    BleError as ReactNativeBleError,\n    Subscription,\n} from \"react-native-ble-plx\";\nimport { BleScanner } from \"./BleScanner.js\";\n\nconst logger = Logger.get(\"BleChannel\");\n\nexport class ReactNativeBleCentralInterface implements NetInterface {\n    private openChannels: Map<ServerAddress, Device> = new Map();\n    private onMatterMessageListener: ((socket: Channel<ByteArray>, data: ByteArray) => void) | undefined;\n\n    async openChannel(address: ServerAddress): Promise<Channel<ByteArray>> {\n        if (address.type !== \"ble\") {\n            throw new InternalError(`Unsupported address type ${address.type}.`);\n        }\n        if (this.onMatterMessageListener === undefined) {\n            throw new InternalError(`Network Interface was not added to the system yet.`);\n        }\n\n        // Get the peripheral by address and connect to it.\n        const { peripheral, hasAdditionalAdvertisementData } = (\n            Ble.get().getBleScanner() as BleScanner\n        ).getDiscoveredDevice(address.peripheralAddress);\n        if (this.openChannels.has(address)) {\n            throw new BleError(\n                `Peripheral ${address.peripheralAddress} is already connected. Only one connection supported right now.`,\n            );\n        }\n        logger.debug(`Connect to Peripheral now`);\n        let device: Device;\n        try {\n            device = await peripheral.connect();\n        } catch (error) {\n            if (error instanceof ReactNativeBleError && error.errorCode === BleErrorCode.DeviceAlreadyConnected) {\n                device = peripheral;\n            } else {\n                throw new BleError(`Error connecting to peripheral: ${(error as any).message}`);\n            }\n        }\n        logger.debug(`Peripheral connected successfully, MTU = ${device.mtu}`);\n\n        // Once the peripheral has been connected, then discover the services and characteristics of interest.\n        device = await device.discoverAllServicesAndCharacteristics();\n\n        const services = await device.services();\n\n        for (const service of services) {\n            logger.debug(`found service: ${service.uuid}`);\n            if (service.uuid !== BLE_MATTER_SERVICE_UUID) continue;\n\n            // So, discover its characteristics.\n            const characteristics = await device.characteristicsForService(service.uuid);\n\n            let characteristicC1ForWrite: Characteristic | undefined;\n            let characteristicC2ForSubscribe: Characteristic | undefined;\n            let additionalCommissioningRelatedData: ByteArray | undefined;\n\n            for (const characteristic of characteristics) {\n                // Loop through each characteristic and match them to the UUIDs that we know about.\n                logger.debug(\"found characteristic:\", characteristic.uuid);\n\n                switch (characteristic.uuid) {\n                    case BLE_MATTER_C1_CHARACTERISTIC_UUID:\n                        logger.debug(\"found C1 characteristic\");\n                        characteristicC1ForWrite = characteristic;\n                        break;\n\n                    case BLE_MATTER_C2_CHARACTERISTIC_UUID:\n                        logger.debug(\"found C2 characteristic\");\n                        characteristicC2ForSubscribe = characteristic;\n                        break;\n\n                    case BLE_MATTER_C3_CHARACTERISTIC_UUID:\n                        logger.debug(\"found C3 characteristic\");\n                        if (hasAdditionalAdvertisementData) {\n                            logger.debug(\"reading additional commissioning related data\");\n                            const characteristicWithValue = await service.readCharacteristic(characteristic.uuid);\n                            if (characteristicWithValue.value !== null) {\n                                additionalCommissioningRelatedData = ByteArray.fromBase64(\n                                    characteristicWithValue.value,\n                                );\n                            } else {\n                                logger.debug(\"no value in characteristic C3\");\n                            }\n                        }\n                }\n            }\n\n            if (!characteristicC1ForWrite || !characteristicC2ForSubscribe) {\n                logger.debug(\"missing characteristics\");\n                continue;\n            }\n\n            this.openChannels.set(address, peripheral);\n            return await ReactNativeBleChannel.create(\n                peripheral,\n                characteristicC1ForWrite,\n                characteristicC2ForSubscribe,\n                this.onMatterMessageListener,\n                additionalCommissioningRelatedData,\n            );\n        }\n\n        throw new BleError(`No Matter service found on peripheral ${peripheral.id}`);\n    }\n\n    onData(listener: (socket: Channel<ByteArray>, data: ByteArray) => void): Listener {\n        this.onMatterMessageListener = listener;\n        return {\n            close: async () => await this.close(),\n        };\n    }\n\n    async close() {\n        for (const peripheral of this.openChannels.values()) {\n            await peripheral.cancelConnection();\n        }\n    }\n}\n\nexport class ReactNativeBleChannel implements Channel<ByteArray> {\n    static async create(\n        peripheral: Device,\n        characteristicC1ForWrite: Characteristic,\n        characteristicC2ForSubscribe: Characteristic,\n        onMatterMessageListener: (socket: Channel<ByteArray>, data: ByteArray) => void,\n        _additionalCommissioningRelatedData?: ByteArray,\n    ): Promise<ReactNativeBleChannel> {\n        let mtu = peripheral.mtu ?? 0;\n        if (mtu > BLE_MAXIMUM_BTP_MTU) {\n            mtu = BLE_MAXIMUM_BTP_MTU;\n        }\n        logger.debug(`Using MTU=${mtu} (Peripheral MTU=${peripheral.mtu})`);\n        const btpHandshakeRequest = BtpCodec.encodeBtpHandshakeRequest({\n            versions: BTP_SUPPORTED_VERSIONS,\n            attMtu: mtu,\n            clientWindowSize: BTP_MAXIMUM_WINDOW_SIZE,\n        });\n        logger.debug(`sending BTP handshake request: ${Logger.toJSON(btpHandshakeRequest)}`);\n        characteristicC1ForWrite = await characteristicC1ForWrite.writeWithResponse(btpHandshakeRequest.toBase64());\n\n        const btpHandshakeTimeout = Time.getTimer(\"BLE handshake timeout\", BTP_CONN_RSP_TIMEOUT_MS, async () => {\n            await peripheral.cancelConnection();\n            logger.debug(\"Handshake Response not received. Disconnected from peripheral\");\n        }).start();\n\n        logger.debug(\"subscribing to C2 characteristic\");\n\n        const { promise: handshakeResponseReceivedPromise, resolver } = createPromise<ByteArray>();\n\n        let handshakeReceived = false;\n        const handshakeSubscription = characteristicC2ForSubscribe.monitor((error, characteristic) => {\n            if (error !== null || characteristic === null) {\n                if (error instanceof ReactNativeBleError && error.errorCode === 2 && handshakeReceived) {\n                    // Subscription got removed after handshake was received, all good\n                    return;\n                }\n                logger.debug(\"Error while monitoring C2 characteristic\", error);\n                return;\n            }\n            const characteristicData = characteristic.value;\n            if (characteristicData === null) {\n                logger.debug(\"C2 characteristic value is null\");\n                return;\n            }\n            const data = ByteArray.fromBase64(characteristicData);\n            logger.debug(`received first data on C2: ${data.toHex()}`);\n\n            if (data[0] === 0x65 && data[1] === 0x6c && data.length === 6) {\n                // Check if the first two bytes and length match the Matter handshake\n                logger.info(`Received Matter handshake response: ${data.toHex()}.`);\n                btpHandshakeTimeout.stop();\n                resolver(data);\n            }\n        });\n\n        const handshakeResponse = await handshakeResponseReceivedPromise;\n        handshakeReceived = true;\n        handshakeSubscription.remove();\n\n        let connectionCloseExpected = false;\n        const btpSession = await BtpSessionHandler.createAsCentral(\n            new ByteArray(handshakeResponse),\n            // callback to write data to characteristic C1\n            async data => {\n                characteristicC1ForWrite = await characteristicC1ForWrite.writeWithResponse(data.toBase64());\n            },\n            // callback to disconnect the BLE connection\n            async () => {\n                connectionCloseExpected = true;\n                dataSubscription.remove();\n                await peripheral.cancelConnection();\n                logger.debug(\"disconnected from peripheral\");\n            },\n\n            // callback to forward decoded and de-assembled Matter messages to ExchangeManager\n            async data => {\n                if (onMatterMessageListener === undefined) {\n                    throw new InternalError(`No listener registered for Matter messages`);\n                }\n                onMatterMessageListener(bleChannel, data);\n            },\n        );\n\n        const dataSubscription = characteristicC2ForSubscribe.monitor((error, characteristic) => {\n            if (error !== null || characteristic === null) {\n                if (error instanceof ReactNativeBleError && error.errorCode === 2 && connectionCloseExpected) {\n                    // Subscription got removed and received, all good\n                    return;\n                }\n                logger.debug(\"Error while monitoring C2 characteristic\", error);\n                return;\n            }\n            const characteristicData = characteristic.value;\n            if (characteristicData === null) {\n                logger.debug(\"C2 characteristic value is null\");\n                return;\n            }\n            const data = ByteArray.fromBase64(characteristicData);\n            logger.debug(`received data on C2: ${data.toHex}`);\n\n            void btpSession.handleIncomingBleData(new ByteArray(data));\n        });\n\n        const bleChannel = new ReactNativeBleChannel(peripheral, btpSession);\n        return bleChannel;\n    }\n\n    private connected = true;\n    private disconnectSubscription: Subscription;\n\n    constructor(\n        private readonly peripheral: Device,\n        private readonly btpSession: BtpSessionHandler,\n    ) {\n        this.disconnectSubscription = peripheral.onDisconnected(error => {\n            logger.debug(`Disconnected from peripheral ${peripheral.id}: ${error}`);\n            this.connected = false;\n            this.disconnectSubscription.remove();\n            void this.btpSession.close();\n        });\n    }\n\n    /**\n     * Send a Matter message to the connected device - need to do BTP assembly first.\n     *\n     * @param data\n     */\n    async send(data: ByteArray) {\n        if (!this.connected) {\n            logger.debug(\"Cannot send data because not connected to peripheral.\");\n            return;\n        }\n        if (this.btpSession === undefined) {\n            throw new BtpFlowError(`Cannot send data, no BTP session initialized`);\n        }\n        await this.btpSession.sendMatterMessage(data);\n    }\n\n    // Channel<ByteArray>\n    get name() {\n        return `ble://${this.peripheral.id}`;\n    }\n\n    async close() {\n        await this.btpSession.close();\n        this.disconnectSubscription.remove();\n        await this.peripheral.cancelConnection();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
